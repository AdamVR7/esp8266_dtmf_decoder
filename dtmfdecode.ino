#define MAXSAMPLETEST 5

uint8_t f697[] = {0x8B, 0xB3, 0xDB, 0xE5, 0xD3, 0xA7, 0x71, 0x3E, 0x1F, 0x1B, 0x35, 0x65, 0x9C, 0xCB, 0xE4, 0xDF, 0xBF, 0x8C, 0x55, 0x2B, 0x19, 0x26, 0x4C, 0x82, 0xB7, 0xDC, 0xE5, 0xD1, 0xA5, 0x6E, 0x3C, 0x1E, 0x1C, 0x37, 0x67, 0x9F, 0xCD, 0xE4, 0xDF, 0xBD, 0x89, 0x53, 0x29, 0x19, 0x27, 0x4F, 0x84, 0xB9, 0xDD, 0xE5, 0xD0, 0xA3, 0x6C, 0x3B, 0x1D, 0x1D, 0x39, 0x6A, 0xA1, 0xCF, 0xE5, 0xDE, 0xBB, 0x87, 0x50, 0x28, 0x19, 0x28, 0x51, 0x87, 0xBB, 0xDE, 0xE5, 0xCE, 0xA1, 0x6A, 0x39, 0x1D, 0x1D, 0x3B, 0x6C, 0xA3, 0xD0, 0xE5, 0xDD, 0xB9, 0x84, 0x4E, 0x27, 0x19, 0x29, 0x53, 0x89, 0xBD, 0xDF, 0xE4, 0xCD, 0x9E, 0x67, 0x37, 0x1C, 0x1E, 0x3D, 0x6F, 0xA6, 0xD2, 0xE5, 0xDB, 0xB7, 0x82, 0x4C, 0x25, 0x19, 0x2B, 0x55, 0x8C, 0xBF, 0xE0, 0xE4, 0xCB, 0x9C, 0x65, 0x35, 0x1B, 0x1F, 0x3F, 0x71, 0xA8, 0xD3, 0xE6, 0xDA, 0xB5, 0x7F, 0x4A, 0x24, 0x19, 0x2C, 0x57, 0x8E, 0xC1, 0xE0, 0xE3, 0xC9, 0x9A, 0x62, 0x34, 0x1B, 0x20, 0x40, 0x74, 0xAA, 0xD5, 0xE6, 0xD9, 0xB2, 0x7D, 0x48, 0x23, 0x1A, 0x2E, 0x5A, 0x91, 0xC3, 0xE1, 0xE3, 0xC8, 0x97, 0x60, 0x32, 0x1A, 0x21, 0x42, 0x76, 0xAD, 0xD6, 0xE6, 0xD8, 0xB0, 0x7A, 0x46, 0x22, 0x1A, 0x2F, 0x5C, 0x93, 0xC5, 0xE2, 0xE2, 0xC6, 0x95, 0x5E, 0x30, 0x1A, 0x21, 0x45, 0x78, 0xAF, 0xD7, 0xE7, 0xD5};
uint8_t f770[] = {0x8C, 0xB8, 0xE0, 0xE2, 0xC4, 0x8B, 0x50, 0x24, 0x1A, 0x33, 0x68, 0xA4, 0xD4, 0xE6, 0xD3, 0xA3, 0x66, 0x32, 0x1A, 0x25, 0x51, 0x8D, 0xC4, 0xE3, 0xDF, 0xB8, 0x7E, 0x44, 0x1F, 0x1D, 0x3D, 0x75, 0xB1, 0xDB, 0xE5, 0xCB, 0x96, 0x59, 0x2A, 0x19, 0x2D, 0x5E, 0x9B, 0xCE, 0xE5, 0xD9, 0xAD, 0x70, 0x39, 0x1B, 0x21, 0x48, 0x83, 0xBC, 0xE0, 0xE2, 0xC1, 0x88, 0x4D, 0x23, 0x1A, 0x35, 0x6B, 0xA7, 0xD6, 0xE6, 0xD1, 0xA0, 0x63, 0x30, 0x19, 0x27, 0x54, 0x90, 0xC7, 0xE4, 0xDD, 0xB6, 0x7B, 0x41, 0x1E, 0x1D, 0x3F, 0x78, 0xB4, 0xDC, 0xE4, 0xC8, 0x93, 0x56, 0x28, 0x19, 0x2F, 0x61, 0x9E, 0xD0, 0xE6, 0xD7, 0xAA, 0x6D, 0x37, 0x1B, 0x22, 0x4B, 0x86, 0xBF, 0xE1, 0xE1, 0xBE, 0x85, 0x4A, 0x22, 0x1B, 0x38, 0x6E, 0xAA, 0xD8, 0xE6, 0xCF, 0x9D, 0x60, 0x2E, 0x19, 0x29, 0x57, 0x93, 0xC9, 0xE5, 0xDC, 0xB3, 0x77, 0x3F, 0x1D, 0x1E, 0x42, 0x7B, 0xB6, 0xDE, 0xE4, 0xC6, 0x90, 0x53, 0x27, 0x19, 0x31, 0x64, 0xA1, 0xD2, 0xE6, 0xD6, 0xA7, 0x6A, 0x35, 0x1A, 0x24, 0x4D, 0x89, 0xC1, 0xE2, 0xE0, 0xBC, 0x82, 0x47, 0x21, 0x1C, 0x3A, 0x71, 0xAD, 0xD9, 0xE5, 0xCD, 0x9A, 0x5D, 0x2C, 0x19, 0x2A, 0x5A, 0x97, 0xCB, 0xE5, 0xDB, 0xB0, 0x74, 0x3C, 0x1C, 0x1F, 0x45, 0x7F, 0xB9, 0xDF, 0xE3, 0xC4, 0x8C, 0x50, 0x25, 0x1A, 0x33, 0x67, 0xA4, 0xD4};
uint8_t f852[] = {0x8E, 0xBD, 0xE4, 0xDC, 0xAE, 0x6A, 0x31, 0x19, 0x2E, 0x65, 0xA8, 0xDA, 0xE4, 0xC3, 0x85, 0x45, 0x1D, 0x20, 0x4C, 0x8F, 0xCA, 0xE6, 0xD5, 0x9F, 0x5C, 0x28, 0x1A, 0x37, 0x74, 0xB6, 0xE0, 0xE1, 0xB7, 0x76, 0x39, 0x1A, 0x27, 0x5A, 0x9D, 0xD4, 0xE6, 0xCC, 0x91, 0x4E, 0x21, 0x1D, 0x43, 0x83, 0xC2, 0xE4, 0xDB, 0xAA, 0x67, 0x2F, 0x19, 0x30, 0x69, 0xAB, 0xDB, 0xE4, 0xC1, 0x82, 0x42, 0x1C, 0x22, 0x50, 0x92, 0xCD, 0xE6, 0xD3, 0x9C, 0x59, 0x26, 0x1A, 0x3A, 0x77, 0xB9, 0xE1, 0xDF, 0xB4, 0x73, 0x36, 0x1A, 0x29, 0x5D, 0xA1, 0xD6, 0xE5, 0xC9, 0x8D, 0x4B, 0x20, 0x1E, 0x46, 0x87, 0xC4, 0xE5, 0xD9, 0xA7, 0x64, 0x2D, 0x19, 0x32, 0x6C, 0xAF, 0xDD, 0xE3, 0xBE, 0x7E, 0x3F, 0x1C, 0x23, 0x53, 0x96, 0xCF, 0xE6, 0xD1, 0x99, 0x56, 0x25, 0x1B, 0x3D, 0x7B, 0xBB, 0xE2, 0xDE, 0xB1, 0x6F, 0x34, 0x19, 0x2B, 0x61, 0xA4, 0xD7, 0xE5, 0xC7, 0x8A, 0x48, 0x1F, 0x1F, 0x49, 0x8A, 0xC7, 0xE5, 0xD7, 0xA4, 0x60, 0x2B, 0x19, 0x34, 0x6F, 0xB2, 0xDE, 0xE2, 0xBB, 0x7B, 0x3C, 0x1B, 0x25, 0x56, 0x99, 0xD1, 0xE6, 0xCF, 0x95, 0x52, 0x23, 0x1C, 0x3F, 0x7F, 0xBE, 0xE3, 0xDD, 0xAE, 0x6C, 0x32, 0x19, 0x2D, 0x64, 0xA7, 0xD9, 0xE4, 0xC4, 0x86, 0x45, 0x1E, 0x20, 0x4C, 0x8E, 0xC9, 0xE5, 0xD5, 0xA0, 0x5D, 0x29, 0x1A, 0x37, 0x73, 0xB5, 0xDF};
uint8_t f941[] = {0x8F, 0xC2, 0xE7, 0xD0, 0x93, 0x49, 0x1D, 0x24, 0x5B, 0xA4, 0xDB, 0xE2, 0xB6, 0x6D, 0x2E, 0x19, 0x3A, 0x7F, 0xC4, 0xE5, 0xD1, 0x93, 0x4A, 0x1D, 0x24, 0x5A, 0xA4, 0xDB, 0xE2, 0xB6, 0x6D, 0x2E, 0x1A, 0x3A, 0x7F, 0xC4, 0xE5, 0xD2, 0x93, 0x4A, 0x1D, 0x24, 0x5A, 0xA4, 0xDB, 0xE2, 0xB6, 0x6D, 0x2E, 0x19, 0x3A, 0x7F, 0xC4, 0xE5, 0xD2, 0x93, 0x4A, 0x1D, 0x23, 0x5A, 0xA4, 0xDB, 0xE2, 0xB6, 0x6E, 0x2E, 0x19, 0x3A, 0x7F, 0xC4, 0xE5, 0xD2, 0x93, 0x4A, 0x1D, 0x23, 0x5A, 0xA3, 0xDB, 0xE2, 0xB6, 0x6E, 0x2E, 0x19, 0x3A, 0x7E, 0xC4, 0xE5, 0xD2, 0x94, 0x4B, 0x1D, 0x23, 0x59, 0xA3, 0xDB, 0xE2, 0xB7, 0x6E, 0x2F, 0x19, 0x39, 0x7E, 0xC3, 0xE5, 0xD2, 0x94, 0x4B, 0x1D, 0x23, 0x59, 0xA3, 0xDA, 0xE2, 0xB7, 0x6E, 0x2F, 0x19, 0x39, 0x7E, 0xC3, 0xE5, 0xD2, 0x94, 0x4B, 0x1E, 0x23, 0x59, 0xA3, 0xDA, 0xE2, 0xB7, 0x6F, 0x2F, 0x19, 0x39, 0x7E, 0xC3, 0xE5, 0xD2, 0x94, 0x4B, 0x1E, 0x23, 0x59, 0xA3, 0xDA, 0xE3, 0xB7, 0x6F, 0x2F, 0x19, 0x39, 0x7D, 0xC3, 0xE5, 0xD3, 0x94, 0x4C, 0x1E, 0x23, 0x58, 0xA2, 0xDA, 0xE3, 0xB7, 0x6F, 0x2F, 0x19, 0x39, 0x7D, 0xC3, 0xE5, 0xD3, 0x95, 0x4C, 0x1E, 0x23, 0x58, 0xA2, 0xDA, 0xE3, 0xB8, 0x6F, 0x2F, 0x19, 0x39, 0x7D, 0xC3, 0xE5, 0xD3, 0x95, 0x4C, 0x1E, 0x23, 0x57, 0xA2, 0xD9, 0xE4, 0xB5};

uint8_t f1029[] = {0x94, 0xCF, 0xE2, 0x9C, 0x42, 0x19, 0x47, 0xA4, 0xE3, 0xCE, 0x78, 0x28, 0x21, 0x69, 0xC4, 0xE5, 0xB2, 0x54, 0x1B, 0x35, 0x8E, 0xDA, 0xDB, 0x8F, 0x36, 0x1B, 0x53, 0xB1, 0xE5, 0xC4, 0x6A, 0x22, 0x28, 0x77, 0xCE, 0xE3, 0xA5, 0x48, 0x19, 0x40, 0x9C, 0xE0, 0xD3, 0x81, 0x2D, 0x1E, 0x61, 0xBD, 0xE6, 0xB9, 0x5C, 0x1D, 0x30, 0x86, 0xD6, 0xDE, 0x97, 0x3C, 0x1A, 0x4C, 0xAA, 0xE4, 0xCA, 0x72, 0x25, 0x24, 0x6F, 0xC8, 0xE4, 0xAC, 0x4F, 0x1A, 0x3A, 0x94, 0xDD, 0xD8, 0x89, 0x32, 0x1C, 0x59, 0xB6, 0xE6, 0xC0, 0x64, 0x1F, 0x2B, 0x7D, 0xD2, 0xE1, 0x9F, 0x43, 0x19, 0x45, 0xA2, 0xE2, 0xD0, 0x7A, 0x29, 0x20, 0x67, 0xC2, 0xE6, 0xB4, 0x56, 0x1B, 0x34, 0x8C, 0xD9, 0xDC, 0x91, 0x38, 0x1A, 0x52, 0xAF, 0xE5, 0xC6, 0x6C, 0x22, 0x27, 0x75, 0xCC, 0xE3, 0xA7, 0x4A, 0x19, 0x3F, 0x9A, 0xDF, 0xD5, 0x83, 0x2E, 0x1E, 0x5F, 0xBB, 0xE6, 0xBB, 0x5E, 0x1D, 0x2F, 0x84, 0xD5, 0xDF, 0x99, 0x3E, 0x19, 0x4A, 0xA8, 0xE3, 0xCC, 0x74, 0x26, 0x23, 0x6D, 0xC7, 0xE5, 0xAE, 0x51, 0x1A, 0x38, 0x92, 0xDC, 0xD9, 0x8B, 0x33, 0x1B, 0x57, 0xB5, 0xE6, 0xC1, 0x66, 0x20, 0x2A, 0x7B, 0xD0, 0xE2, 0xA1, 0x44, 0x19, 0x43, 0xA0, 0xE1, 0xD1, 0x7C, 0x2B, 0x20, 0x65, 0xC0, 0xE6, 0xB6, 0x58, 0x1C, 0x33, 0x8A, 0xD8, 0xDD, 0x93, 0x39, 0x1A, 0x4F, 0xAE};
uint8_t f1336[] = {0x96, 0xD5, 0xDA, 0x7E, 0x27, 0x27, 0x81, 0xD8, 0xD8, 0x7D, 0x26, 0x28, 0x82, 0xDA, 0xD7, 0x7C, 0x25, 0x29, 0x83, 0xDA, 0xD6, 0x7B, 0x25, 0x29, 0x85, 0xDB, 0xD5, 0x7A, 0x24, 0x2A, 0x86, 0xDB, 0xD5, 0x78, 0x23, 0x2B, 0x87, 0xDC, 0xD4, 0x77, 0x23, 0x2C, 0x88, 0xDC, 0xD3, 0x76, 0x22, 0x2C, 0x8A, 0xDD, 0xD2, 0x75, 0x22, 0x2D, 0x8B, 0xDD, 0xD2, 0x73, 0x21, 0x2E, 0x8C, 0xDE, 0xD1, 0x72, 0x21, 0x2F, 0x8E, 0xDE, 0xD0, 0x71, 0x20, 0x2F, 0x8F, 0xDF, 0xCF, 0x6F, 0x20, 0x30, 0x90, 0xDF, 0xCE, 0x6E, 0x1F, 0x31, 0x91, 0xE0, 0xCE, 0x6D, 0x1F, 0x32, 0x93, 0xE0, 0xCD, 0x6C, 0x1F, 0x33, 0x94, 0xE1, 0xCC, 0x6A, 0x1E, 0x34, 0x95, 0xE1, 0xCB, 0x69, 0x1E, 0x34, 0x96, 0xE1, 0xCA, 0x68, 0x1D, 0x35, 0x98, 0xE2, 0xC9, 0x67, 0x1D, 0x36, 0x99, 0xE2, 0xC8, 0x65, 0x1D, 0x37, 0x9A, 0xE3, 0xC7, 0x64, 0x1C, 0x38, 0x9B, 0xE3, 0xC7, 0x63, 0x1C, 0x39, 0x9D, 0xE3, 0xC6, 0x62, 0x1C, 0x3A, 0x9E, 0xE3, 0xC5, 0x60, 0x1B, 0x3B, 0x9F, 0xE4, 0xC4, 0x5F, 0x1B, 0x3C, 0xA0, 0xE4, 0xC3, 0x5E, 0x1B, 0x3D, 0xA2, 0xE4, 0xC2, 0x5D, 0x1B, 0x3E, 0xA3, 0xE4, 0xC1, 0x5C, 0x1A, 0x3F, 0xA4, 0xE5, 0xC0, 0x5A, 0x1A, 0x40, 0xA5, 0xE5, 0xBF, 0x59, 0x1A, 0x41, 0xA6, 0xE5, 0xBE, 0x58, 0x1A, 0x42, 0xA8, 0xE5, 0xBD, 0x56, 0x1B, 0x42, 0xAA, 0xE2};
uint8_t f1477[] = {0x99, 0xD9, 0xCD, 0x5C, 0x1A, 0x4F, 0xC0, 0xE2, 0x8F, 0x28, 0x2B, 0x93, 0xE4, 0xBC, 0x4C, 0x1A, 0x62, 0xCE, 0xDB, 0x7A, 0x20, 0x38, 0xA6, 0xE6, 0xAB, 0x3B, 0x1E, 0x76, 0xD9, 0xD1, 0x67, 0x1B, 0x48, 0xB8, 0xE4, 0x98, 0x2E, 0x26, 0x8A, 0xE1, 0xC3, 0x54, 0x19, 0x59, 0xC7, 0xDF, 0x84, 0x24, 0x31, 0x9D, 0xE5, 0xB3, 0x43, 0x1C, 0x6C, 0xD4, 0xD6, 0x70, 0x1D, 0x40, 0xAF, 0xE6, 0xA1, 0x34, 0x22, 0x80, 0xDE, 0xCA, 0x5D, 0x19, 0x50, 0xC0, 0xE2, 0x8E, 0x28, 0x2B, 0x94, 0xE4, 0xBB, 0x4B, 0x1A, 0x63, 0xCE, 0xDB, 0x7A, 0x20, 0x38, 0xA7, 0xE6, 0xAA, 0x3B, 0x1E, 0x76, 0xD9, 0xD1, 0x66, 0x1A, 0x48, 0xB8, 0xE4, 0x97, 0x2E, 0x26, 0x8A, 0xE1, 0xC3, 0x54, 0x19, 0x5A, 0xC8, 0xDF, 0x84, 0x23, 0x32, 0x9D, 0xE5, 0xB3, 0x43, 0x1C, 0x6D, 0xD4, 0xD6, 0x70, 0x1C, 0x40, 0xB0, 0xE6, 0xA1, 0x34, 0x22, 0x80, 0xDE, 0xCA, 0x5D, 0x19, 0x51, 0xC0, 0xE2, 0x8D, 0x28, 0x2C, 0x94, 0xE4, 0xBB, 0x4B, 0x1A, 0x63, 0xCE, 0xDB, 0x7A, 0x1F, 0x39, 0xA7, 0xE6, 0xAA, 0x3B, 0x1E, 0x77, 0xD9, 0xD0, 0x66, 0x1A, 0x48, 0xB8, 0xE4, 0x97, 0x2E, 0x27, 0x8A, 0xE1, 0xC3, 0x53, 0x19, 0x5A, 0xC8, 0xDF, 0x83, 0x23, 0x32, 0x9E, 0xE5, 0xB2, 0x42, 0x1C, 0x6D, 0xD4, 0xD6, 0x70, 0x1C, 0x40, 0xB0, 0xE6, 0xA0, 0x34, 0x22, 0x81, 0xDD, 0xCB, 0x5A, 0x1D};
uint8_t f1633[] = {0x9C, 0xDD, 0xBA, 0x3B, 0x23, 0x8C, 0xE5, 0xAB, 0x34, 0x28, 0x9A, 0xE6, 0xA0, 0x2B, 0x30, 0xA6, 0xE5, 0x93, 0x24, 0x39, 0xB2, 0xE3, 0x85, 0x1F, 0x43, 0xBD, 0xDF, 0x78, 0x1C, 0x4E, 0xC7, 0xDA, 0x6B, 0x19, 0x5A, 0xD0, 0xD3, 0x5E, 0x19, 0x67, 0xD8, 0xCB, 0x52, 0x1B, 0x74, 0xDE, 0xC1, 0x47, 0x1E, 0x81, 0xE2, 0xB6, 0x3C, 0x22, 0x8E, 0xE5, 0xAB, 0x33, 0x29, 0x9B, 0xE6, 0x9E, 0x2B, 0x31, 0xA8, 0xE5, 0x91, 0x24, 0x3A, 0xB3, 0xE3, 0x84, 0x1F, 0x44, 0xBE, 0xDF, 0x77, 0x1B, 0x4F, 0xC8, 0xD9, 0x6A, 0x19, 0x5B, 0xD1, 0xD2, 0x5D, 0x19, 0x68, 0xD8, 0xCA, 0x51, 0x1B, 0x75, 0xDE, 0xC0, 0x45, 0x1E, 0x82, 0xE2, 0xB5, 0x3B, 0x23, 0x8F, 0xE5, 0xA9, 0x32, 0x2A, 0x9C, 0xE6, 0x9D, 0x2A, 0x31, 0xA9, 0xE5, 0x90, 0x23, 0x3B, 0xB5, 0xE3, 0x83, 0x1E, 0x45, 0xBF, 0xDE, 0x75, 0x1B, 0x50, 0xC9, 0xD9, 0x68, 0x19, 0x5D, 0xD2, 0xD1, 0x5C, 0x19, 0x69, 0xD9, 0xC9, 0x50, 0x1B, 0x76, 0xDF, 0xBF, 0x44, 0x1F, 0x84, 0xE3, 0xB4, 0x3A, 0x24, 0x91, 0xE5, 0xA8, 0x31, 0x2A, 0x9E, 0xE6, 0x9C, 0x29, 0x32, 0xAA, 0xE5, 0x8F, 0x23, 0x3C, 0xB6, 0xE2, 0x81, 0x1E, 0x46, 0xC1, 0xDE, 0x74, 0x1B, 0x52, 0xCA, 0xD8, 0x67, 0x19, 0x5E, 0xD3, 0xD0, 0x5A, 0x19, 0x6B, 0xDA, 0xC8, 0x4E, 0x1B, 0x78, 0xDF, 0xBE, 0x43, 0x1F, 0x84, 0xE4, 0xB2, 0x3B};



uint8_t t_x[MAXSAMPLETEST + 1];
uint8_t t_y[MAXSAMPLETEST + 1];
int t_xcounter;
int t_ycounter;
uint8_t sample[200];
uint16_t result[8];
int dec_result[16];

unsigned long avg;


unsigned long newTime;
int maxresult;
int maxresult_f;
int secmaxresult;
int secmaxresult_f;
int maxdec_result;
int maxdec_result_f;


void setup() {
  Serial.begin(115200);
}

void loop() {

  for (int i = 0; i < 200; i++) {
    newTime = micros();
    sample[i] = analogRead(A0) ;
    sample[i] = map(sample[i], 90, 130, 0, 6);
    //Serial.println(sample[i]);
    while (micros() < (newTime + 125)) {
      /* do nothing to wait */
    }
  }

  for ( int i = 0; i < 200; i++) {
    result[0] += sample[i] * f697[i];
    result[1] += sample[i] * f770[i];
    result[2] += sample[i] * f852[i];
    result[3] += sample[i] * f941[i];
    result[4] += sample[i] * f1029[i];
    result[5] += sample[i] * f1336[i];
    result[6] += sample[i] * f1477[i];
    result[7] += sample[i] * f1633[i];
  }

  for (int i = 0 ; i < 8; i++) {
    //Serial.print(result[i]);
    //Serial.print(",");
    result[i] = 0;
  }
  //Serial.println();

  for (int i = 0; i < 8; i++) {
    avg += result[i];
    if (result[i] > maxresult) {
      maxresult = result[i];
      maxresult_f = i;
    }
  }
  result[maxresult_f] = 0;


  for (int i = 0; i < 8; i++) {
    if (result[i] > secmaxresult) {
      secmaxresult = result[i];
      secmaxresult_f = i;
    }
  }

  avg /= 8;
  for (int i = 0; i < 8; i++) {
    result[i] = 0;
  }

  if (maxresult > (avg + 3500)) {
    avg = 0;
    if (maxresult_f > secmaxresult_f) {
      t_y[t_ycounter] = maxresult_f;
      t_x[t_xcounter] = secmaxresult_f;
    }
    else {
      t_y[t_ycounter] = secmaxresult_f;
      t_x[t_xcounter] = maxresult_f;
    }
    t_xcounter++;
    t_ycounter++;
    /*Serial.print(maxresult_f);
      Serial.print(",");
      Serial.println(secmaxresult_f);*/
  }

  else {
    for (int i = 0 ; i < MAXSAMPLETEST; i++) {
      t_x[i] = 0;
      t_y[i] = 0;
    }
    t_xcounter = 0;
    t_ycounter = 0;
  }

  if (t_xcounter == MAXSAMPLETEST && t_ycounter == MAXSAMPLETEST) {
    t_xcounter = 0;
    t_ycounter = 0;
    for (int i = 0 ; i < MAXSAMPLETEST ; i++) {
      if (t_x[i] == 0 && t_y[i] == 4) dec_result[0]++;
      else if (t_x[i] == 0 && t_y[i] == 5) dec_result[1]++;
      else if (t_x[i] == 0 && t_y[i] == 6) dec_result[2]++;
      else if (t_x[i] == 0 && t_y[i] == 7) dec_result[3]++;
      else if (t_x[i] == 1 && t_y[i] == 4) dec_result[4]++;
      else if (t_x[i] == 1 && t_y[i] == 5) dec_result[5]++;
      else if (t_x[i] == 1 && t_y[i] == 6) dec_result[6]++;
      else if (t_x[i] == 1 && t_y[i] == 7) dec_result[7]++;
      else if (t_x[i] == 2 && t_y[i] == 4) dec_result[8]++;
      else if (t_x[i] == 2 && t_y[i] == 5) dec_result[9]++;
      else if (t_x[i] == 2 && t_y[i] == 6) dec_result[10]++;
      else if (t_x[i] == 2 && t_y[i] == 7) dec_result[11]++;
      else if (t_x[i] == 3 && t_y[i] == 4) dec_result[12]++;
      else if (t_x[i] == 3 && t_y[i] == 5) dec_result[13]++;
      else if (t_x[i] == 3 && t_y[i] == 6) dec_result[14]++;
      else if (t_x[i] == 3 && t_y[i] == 7) dec_result[15]++;
    }


    for (int i = 0 ; i < 16; i++) {
      if (dec_result[i] > maxdec_result) {
        maxdec_result = dec_result[i];
        maxdec_result_f = i;
      }
      dec_result[i] = 0;
    }
    if (maxdec_result_f == 0) Serial.println("1");
    if (maxdec_result_f == 1) Serial.println("2");
    if (maxdec_result_f == 2) Serial.println("3");
    if (maxdec_result_f == 3) Serial.println("A");
    if (maxdec_result_f == 4) Serial.println("4");
    if (maxdec_result_f == 5) Serial.println("5");
    if (maxdec_result_f == 6) Serial.println("6");
    if (maxdec_result_f == 7) Serial.println("B");
    if (maxdec_result_f == 8) Serial.println("7");
    if (maxdec_result_f == 9) Serial.println("8");
    if (maxdec_result_f == 10) Serial.println("9");
    if (maxdec_result_f == 11) Serial.println("C");
    if (maxdec_result_f == 12) Serial.println("*");
    if (maxdec_result_f == 13) Serial.println("0");
    if (maxdec_result_f == 14) Serial.println("#");
    if (maxdec_result_f == 15) Serial.println("D");

    maxdec_result = 0;
    maxdec_result_f = 0;
  }


  maxresult = 0;
  maxresult_f = 0;
  secmaxresult = 0;
  secmaxresult_f = 0;


}
